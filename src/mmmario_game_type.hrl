%%%-------------------------------------------------------------------
%%% @author lycaon
%%% @copyright (C) 2014, <COMPANY>
%%% @doc
%%% ゲーム用のレコード宣言とか集めたファイル
%%% ベクターとかレクトとか一応Erlang側でも扱えるようにしておく
%%% シリアライズの機能とかもここに入れとく
%%% @end
%%% Created : 07. 9 2014 21:59
%%%-------------------------------------------------------------------
-author("lycaon").

%%====================================================================
%% ベクトル周りの関数
%%====================================================================

%%--------------------------------------------------------------------
%% @doc
%% ベクトル
%% ２次元のみを想定
%% @end
%%--------------------------------------------------------------------
-type vec() :: {X :: number(), Y :: number()}.
-record(vec, {
  x, % X要素
  y  % Y要素
}).

% 単位ベクトル
-define(UNIT_VEC, #vec{x = 1, y = 1}).

% ゼロベクトル
-define(ZERO_VEC, #vec{x = 0, y = 0}).

%%--------------------------------------------------------------------
%% @doc
%% X要素の取得
%% @end
%%--------------------------------------------------------------------
-spec getx/1 :: (vec()) -> number().
getx(#vec{x = X}) -> X.

%%--------------------------------------------------------------------
%% @doc
%% Y要素の取得
%% @end
%%--------------------------------------------------------------------
-spec gety/1 :: (vec()) -> number().
gety(#vec{y = Y}) -> Y.

%%====================================================================
%% レクト周りの関数
%%====================================================================

%%--------------------------------------------------------------------
%% @doc
%% レクト
%% ２次元のみを想定
%% @end
%%--------------------------------------------------------------------
-type rect() :: {Origin :: vec(), Size :: vec()}.
-record(rect, {
  origin, % 原点 vec()
  size    % サイズ vec()
}).

% 単位レクト
-define(UNIT_RECT, #rect{origin = ?UNIT_VEC, size = ?UNIT_VEC}).

% ゼロレクト
-define(ZERO_RECT, #rect{origin = ?ZERO_VEC, size = ?ZERO_VEC}).

%%--------------------------------------------------------------------
%% @doc
%% テキストをrectレコードに変換
%% ex: "R5,4,3,2" -> #rect{origin = #vec{x = 5, y = 4}, size = #vec{x = 3, y = 2}}
%% @end
%%--------------------------------------------------------------------
-spec text_to_rect/1 :: (string()) -> rect().
text_to_rect("R" ++ RawText) ->
  [{X, _}, {Y, _}, {W, _}, {H, _} | _] = lists:map(fun(Txt) -> string:to_integer(Txt) end, string:tokens(RawText, ",")),
  #rect{origin = #vec{x = X, y = Y}, size = #vec{x = W, y = H}}.

%%--------------------------------------------------------------------
%% @doc
%% レクトをテキストに変換
%% ex: #rect{origin = #vec{x = 5, y = 4}, size = #vec{x = 3, y = 2}} -> "R5,4,3,2"
%% @end
%%--------------------------------------------------------------------
-spec rect_to_text/1 :: (rect()) -> string().
rect_to_text(#rect{origin = Origin, size = Size}) ->
  lists:flatten([
    "R",
    integer_to_list(Origin#vec.x),
    ",",
    integer_to_list(Origin#vec.y),
    ",",
    integer_to_list(Size#vec.x),
    ",",
    integer_to_list(Size#vec.y)
  ]).

%%--------------------------------------------------------------------
%% @doc
%% {"TeST", #rect()}のような形式になっているレクトをテキストに変換
%% "TeST R20,20,20,20"みたいになる
%% @end
%%--------------------------------------------------------------------
-spec namedrect_to_text/1 :: ({string(), rect()}) -> string().
namedrect_to_text({Name, Rect}) ->
  Name ++ " " ++ rect_to_text(Rect).

%%--------------------------------------------------------------------
%% @doc
%% 複数のレクトをテキストのリストに変換
%% @end
%%--------------------------------------------------------------------
-spec rects_to_text/1 :: (rect()) -> [string()].
rects_to_text(Rects) ->
  [rect_to_text(Rect) || Rect <- Rects].

%%--------------------------------------------------------------------
%% @doc
%% [{"test", #rect()}+]のような形式になっているレクトをテキストのリストに変換
%% @end
%%--------------------------------------------------------------------
-spec namedrects_to_text/1 :: ([{string(), rect()}]) -> [string()].
namedrects_to_text(NamedRects) ->
  [namedrect_to_text(NamedRect) || NamedRect <- NamedRects].

%%--------------------------------------------------------------------
%% @doc
%% レクトの原点を取得
%% @end
%%--------------------------------------------------------------------
-spec getorigin/1 :: (rect()) -> vec().
getorigin(#rect{origin = Origin}) -> Origin.

%%--------------------------------------------------------------------
%% @doc
%% レクトのサイズを取得
%% @end
%%--------------------------------------------------------------------
-spec getsize/1 :: (rect()) -> vec().
getsize(#rect{size = Size}) -> Size.
