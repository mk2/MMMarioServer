%%%-------------------------------------------------------------------
%%% @author lycaon
%%% @copyright (C) 2014, <COMPANY>
%%% @doc
%%% ゲーム用のレコード宣言とか集めたファイル
%%% ベクターとかレクトとか一応Erlang側でも扱えるようにしておく
%%% シリアライズの機能とかもここに入れとく
%%% @end
%%% Created : 07. 9 2014 21:59
%%%-------------------------------------------------------------------
-author("lycaon").

-compile([export_all]).

%%====================================================================
%% ベクトル周りの関数
%%====================================================================

%%--------------------------------------------------------------------
%% @doc
%% ベクトル
%% ２次元のみを想定
%% @end
%%--------------------------------------------------------------------
-record(vec, {
  x, % X要素
  y  % Y要素
}).

% 単位ベクトル
-define(UNIT_VEC, #vec{x = 1.0, y = 1.0}).

getx(#vec{x = X}) -> X.

gety(#vec{y = Y}) -> Y.

%%====================================================================
%% レクト周りの関数
%%====================================================================

%%--------------------------------------------------------------------
%% @doc
%% レクト
%% ２次元のみを想定
%% @end
%%--------------------------------------------------------------------
-record(rect, {
  origin, % 原点 vec()
  size    % サイズ vec()
}).

% 単位レクト
-define(UNIT_RECT, #rect{origin = ?UNIT_VEC, size = ?UNIT_VEC}).

%%--------------------------------------------------------------------
%% @doc
%% テキストをrectレコードに変換
%% ex: "R5,4,3,2" -> #rect{origin = #vec{x = 5, y = 4}, size = #vec{x = 3, y = 2}}
%% @end
%%--------------------------------------------------------------------
text_to_rect("r" ++ RawText) ->
  text_to_rect("R" ++ RawText);
text_to_rect("R" ++ RawText) ->
  [{X, _}, {Y, _}, {W, _}, {H, _} | _] = lists:map(fun(Txt) -> string:to_integer(Txt) end, string:tokens(RawText, ",")),
  #rect{origin = #vec{x = x, y = Y}, size = #vec{x = W, y = Y}}.

%%--------------------------------------------------------------------
%% @doc
%% レクトをテキストに変換
%% ex: #rect{origin = #vec{x = 5, y = 4}, size = #vec{x = 3, y = 2}} -> "R5,4,3,2"
%% @end
%%--------------------------------------------------------------------
rect_to_text(#rect{origin = #vec{x = ox, y = oy}, size = #vec{x = sx, y = sy}}) ->
  "R" ++ string:join([ox, oy, sx, sy], ",").

%%--------------------------------------------------------------------
%% @doc
%% 複数のレクトをテキストのリストに変換
%% @end
%%--------------------------------------------------------------------
rects_to_text(Rects) ->
  [rect_to_text(Rect) || Rect <- Rects].

getorigin(#rect{origin = Origin}) -> Origin.

getsize(#rect{size = Size}) -> Size.
